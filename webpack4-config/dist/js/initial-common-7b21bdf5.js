(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["initial-common"],{

/***/ "./src/js/common.js":
/*!**************************!*\
  !*** ./src/js/common.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es7.symbol.async-iterator */ \"./node_modules/core-js/modules/es7.symbol.async-iterator.js\");\n/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.symbol */ \"./node_modules/core-js/modules/es6.symbol.js\");\n/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.regexp.to-string */ \"./node_modules/core-js/modules/es6.regexp.to-string.js\");\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ \"./node_modules/core-js/modules/es6.object.to-string.js\");\n/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.function.name */ \"./node_modules/core-js/modules/es6.function.name.js\");\n/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ \"./node_modules/core-js/modules/es6.regexp.replace.js\");\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ \"./node_modules/core-js/modules/es6.regexp.split.js\");\n/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es6.regexp.constructor */ \"./node_modules/core-js/modules/es6.regexp.constructor.js\");\n/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n//dom常用事件\n(function (win) {\n  var dom = function () {\n    var _ref;\n\n    //addClass,removeClass,toggleClass,hasClass,都只能检测一个类名\n    //String中'first dom'这样是不行的，只能'first'这种的\n    // true表示标准浏览器（IE9及其以上） false表示IE6-8\n    var flag = \"getComputedStyle\" in win; // 类名的增删改查\n\n    /**\r\n     * @desc  支持单个或者多个类名\r\n     * @DateTime 2018-04-15\r\n     * @param    {HTML Element}   dom元素\r\n     * @param    {String}  className\r\n     * @return   {Boolean}\r\n     */\n\n    function hasClass(ele, cls) {\n      // 这种 var re=new RegExp('(^|\\\\s+)'+cls+'($|\\\\s+)'); 也可以\n      var re = new RegExp('\\\\b' + cls + '\\\\b');\n      return re.test(ele.className);\n    }\n    /**\r\n     * @desc  只添加不存在的类名 支持单个或多个类名的增加\r\n     * @DateTime 2018-04-15\r\n     * @param    {HTML Element}   dom元素\r\n     * @param    {String}  className\r\n     */\n\n\n    function addClass(ele, cls) {\n      // 先去除首尾空格\n      var arr = cls.replace(/^\\s+|\\s+$/g, \"\").split(/\\s+/g); // 以单个或多个空格分割，加不加g无所谓\n\n      for (var i = 0, len = arr.length; i < len; i++) {\n        var curCls = arr[i];\n\n        if (!this.hasClass(ele, curCls)) {\n          ele.className += ' ' + cls;\n        }\n      }\n    }\n    /**\r\n     * @desc 只删除存在的类名 支持单个或多个类名的删减\r\n     * @DateTime 2018-04-15\r\n     * @param    {HTML Element}   dom元素\r\n     * @param    {String}  className\r\n     */\n\n\n    function removeClass(ele, cls) {\n      // 先去除首尾空格\n      var arr = cls.replace(/^\\s+|\\s+$/g, \"\").split(/\\s+/g); // 以单个或多个空格分割，加不加g无所谓\n\n      for (var i = 0, len = arr.length; i < len; i++) {\n        var re = new RegExp('\\\\b' + arr[i] + '\\\\b');\n        var curCls = arr[i];\n\n        if (this.hasClass(ele, curCls)) {\n          // 去除单词\n          ele.className = ele.className.replace(re, ''); // 去除删掉开头或者结尾单词留下的 开头结尾空格\n\n          ele.className = ele.className.replace(/^\\s+|\\s+$/g, ''); // 去除中间的空格，把多个空格换成一个空格\n\n          ele.className = ele.className.replace(/\\b\\s+\\b/g, ' ');\n        }\n      }\n    }\n    /**\r\n     * @desc 把存在的删除，不存在的添加\r\n     * @DateTime 2018-04-15\r\n     * @param    {HTML Element}   dom元素\r\n     * @param    {String}  className\r\n     */\n\n\n    function toggleClass(ele, cls) {\n      // 先去除首尾空格\n      var arr = cls.replace(/^\\s+|\\s+$/g, \"\").split(/\\s+/g); // 以单个或多个空格分割，加不加g无所谓\n\n      for (var i = 0, len = arr.length; i < len; i++) {\n        var re = new RegExp('\\\\b' + arr[i] + '\\\\b');\n        var curCls = arr[i]; // 下面这种太麻烦，不管类名在开头,中间还是结尾都是单词\n        // 所以直接用上面的\n        // var re=new RegExp('(^|\\\\s+)'+arr[i]+'($|\\\\s+)');\n        // 不存在就添加，存在就删除\n\n        if (!this.hasClass(ele, curCls)) {\n          ele.className += ' ' + curCls;\n        } else {\n          // 用空格替换 re\n          ele.className = ele.className.replace(re, ' '); // 去除删掉开头或者结尾单词留下的 开头结尾空格\n\n          ele.className = ele.className.replace(/^\\s+|\\s+$/g, ''); // 去除中间的空格, 中间空格两边是边界\\b\n\n          ele.className = ele.className.replace(/\\b\\s+\\b/g, ' ');\n        }\n      }\n    }\n    /**\r\n     * @desc   获取某个dom对象下的含有1个或者多个className的dom对象\r\n     *         惰性模式 不需要每次调用时候都要判断 浏览器类型\r\n     * @DateTime 2018-04-17\r\n     * @param    {String}   className\r\n     * @param    {HTML Element}   dom 元素\r\n     * @return   {HTML Element}         dom对象\r\n     */\n\n\n    function getClassName(strClass, context) {\n      var arrClass = strClass.split(' '),\n          context = context || document,\n          arr = []; //IE9+以及现代浏览器 ByClassName可以接受'one two '这样类名\n\n      if (flag) {\n        getClassName = function getClassName(strClass, context) {\n          // 把伪数组转为 真数组\n          return [].slice.call(context.getElementsByClassName(strClass));\n        };\n      } else {\n        // IE6-8\n        getClassName = function getClassName(strClass, context) {\n          var nodes = context.getElementsByTagName('*');\n\n          for (var i = 0, len = nodes.length; i < len; i++) {\n            // 当前dom节点\n            var curEle = nodes[i],\n                //  假设当前dom节点都含有多个className\n            flag = true;\n\n            for (var j = 0, length = arrClass.length; j < length; j++) {\n              var re = new RegExp('\\\\b' + arrClass[i] + '\\\\b'); //下面这种太麻烦，不管类名在开头,中间还是结尾都是单词\n              //所以直接用上面的\n              //var re=new RegExp('(^|\\\\s+)'+arrClass[j]+'($|\\\\s+)');\n\n              if (!re.test(curEle.className)) {\n                flag = false; // 只要有一个className不存在就跳出for循环\n                // 开始下一个dom节点\n\n                break;\n              }\n            } // 如果当前dom元素的className满足strClass的话\n\n\n            if (flag) {\n              arr.push(curEle);\n            }\n          }\n\n          return arr;\n        };\n      }\n\n      return getClassName(strClass, context);\n    }\n    /**\r\n     * @desc  伪数组转为真数组 (兼容IE6-8)\r\n     * @DateTime 2018-04-18\r\n     * @param    {NodeList}   伪数组\r\n     * @return   {Array}       数组\r\n     */\n\n\n    function toArray(arr) {\n      arr = arr || []; // IE9+和其他浏览器\n\n      if (flag) {\n        return Array.prototype.slice.call(arr);\n      } else {\n        // IE6-8 不支持slice方法\n        return Array.prototype.concat.apply([], arr);\n      }\n    } // dom节点的增删\n\n    /**\r\n     * @desc    获取某个元素的子元素，第二个参数可选，过滤特定元素\r\n     * @desc    兼容所有浏览器\r\n     * @desc    平常都用 oparent.getElementsByTagName('p') 这种方法，\r\n     * @desc    getChildren2方法就是为了练习用的，没必要用\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   curEle  dom元素\r\n     * @param    {String}   tagName  标签名\r\n     * @return   {Array}           包含dom元素的真数组\r\n     */\n\n\n    function getChildren(curEle, tag) {\n      var arr = []; //IE9+和其他浏览器\n\n      if (flag) {\n        arr = [].slice.call(curEle.children);\n      } else {\n        var nodeList = curEle.childNodes;\n\n        for (var i = 0, len = nodeList.length; i < len; i++) {\n          var curNode = nodeList[i];\n          curNode.nodeType === 1 ? arr.push(curNode) : null;\n        } // 回收\n\n\n        nodeList = null;\n      } // 如果有第二个参数的话\n\n\n      if (typeof tag === 'string') {\n        // 不能写成len=arr.length，因为arr.length是减少的\n        // 这是个大坑，注意下\n        for (var i = 0; i < arr.length; i++) {\n          var ele = arr[i];\n\n          if (ele.nodeName.toLowerCase() !== tag.toLowerCase()) {\n            // 不是想要的标签，删掉，并重新从这个位置开始检测\n            arr.splice(i, 1);\n            i--;\n          }\n        }\n      }\n\n      return arr;\n    }\n    /**\r\n     * @desc 获取上一个兄弟节点\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   curEle dom元素\r\n     * @return   {HTML Element}    dom元素\r\n     */\n\n\n    function getPreEle(curEle) {\n      //IE9+和其他浏览器\n      if (flag) {\n        return curEle.previousElementSibling;\n      } // IE6-8\n\n\n      var pre = curEle.previousSibling;\n\n      while (pre && pre.nodeType !== 1) {\n        pre = pre.previousSibling;\n      }\n\n      return pre;\n    }\n    /**\r\n     * @desc 获取下一个dom元素节点\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   curEle dom元素\r\n     * @return   {HTML Element}       dom元素\r\n     */\n\n\n    function getNextEle(curEle) {\n      //IE9+和其他浏览器\n      if (flag) {\n        return curEle.nextElementSibling;\n      } // IE6-8\n\n\n      var next = curEle.nextSibling;\n\n      while (next && next.nodeType !== 1) {\n        next = next.nextSibling;\n      }\n\n      return next;\n    }\n    /**\r\n     * @desc  获取前面所有节点\r\n     * @DateTime 2018-04-18\r\n     * @param    {[type]}   curEle [description]\r\n     * @return   {[type]}          [description]\r\n     */\n\n\n    function getPrevAll(curEle) {\n      var arr = [];\n      var prev = this.getPreEle(curEle); // 前面节点可能没有为null\n\n      while (prev) {\n        arr.unshift(prev);\n        prev = this.getPreEle(prev);\n      }\n\n      return arr;\n    }\n    /**\r\n     * @desc  获取当前元素后面所有元素\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   curEle\r\n     * @return   {HTML Element}\r\n     */\n\n\n    function getNextAll(curEle) {\n      var arr = [];\n      var next = this.getNextEle(curEle); //后面节点可能没有为null\n\n      while (next) {\n        arr.push(next);\n        next = this.getNextEle(next);\n      }\n\n      return arr;\n    }\n    /**\r\n     * @desc 获取当前元素的相邻的两个元素节点\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   curEle\r\n     * @return   {HTML Element}\r\n     */\n\n\n    function getSibling(curEle) {\n      var pre = this.getPreEle(curEle);\n      var next = this.getNextEle(curEle);\n      var arr = [];\n      pre ? arr.push(pre) : null;\n      next ? arr.push(next) : null;\n      return arr;\n    }\n    /**\r\n     * @desc  获取所有的兄弟元素节点\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   curEle\r\n     * @return   {NodeList}          dom元素集合\r\n     */\n\n\n    function getSiblings(curEle) {\n      return this.getPrevAll(curEle).concat(this.getNextAll(curEle));\n    }\n    /**\r\n     * @desc  获取当前元素的索引\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   curEle\r\n     * @return   {Number}          index\r\n     */\n\n\n    function index(curEle) {\n      return this.getPrevAll(curEle).length;\n    }\n    /**\r\n     * @desc 获取当前元素第一个子元素\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   curEle\r\n     * @return   {HTML Element}\r\n     */\n\n\n    function getFirstChild(curEle) {\n      var child = this.getChildren(curEle);\n      return child.length > 0 ? child[0] : null;\n    }\n    /**\r\n     * @desc 获取当前元素最后一个子元素\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   curEle\r\n     * @return   {HTML Element}\r\n     */\n\n\n    function getLastChild(curEle) {\n      var child = this.getChildren(curEle);\n      return child.length > 0 ? child[child.length - 1] : null;\n    }\n    /**\r\n     * @desc  向指定容器的末尾添加元素\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   newEle    [description]\r\n     * @param    {HTML Element}   container [description]\r\n     */\n\n\n    function append(newEle, container) {\n      container.appendChild(newEle);\n    }\n    /**\r\n     * @Author   xjc\r\n     * @desc  向指定容器的开头添加元素\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   newEle    [description]\r\n     * @param    {HTML Element}   container [description]\r\n     */\n\n\n    function prepend(newEle, container) {\n      var first = this.getFirstChild(container); // 容器里面存在元素的话就向他后面添加，否则就在末尾添加\n\n      if (first) {\n        container.insertBefore(newEle, first);\n        return;\n      }\n\n      container.appendChild(newEle);\n    }\n    /**\r\n     * @desc 把新元素(newEle) 追加到指定元素(oldEle) 前面\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   newEle [description]\r\n     * @param    {HTML Element}   oldEle [description]\r\n     */\n\n\n    function insertBefore(newEle, oldEle) {\n      oldEle.parentNode.insertBefore(newEle, oldEle);\n    }\n    /**\r\n     * @desc 把新元素(newEle) 追加到指定元素(oldEle) 后面\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   newEle [description]\r\n     * @param    {HTML Element}   oldEle [description]\r\n     */\n\n\n    function insertAfter(newEle, oldEle) {\n      var next = this.getNextEle(oldEle); //如果后面存在元素，就在后面元素的前面插入新元素\n      //否则没有子元素的话就在后面添加\n\n      if (next) {\n        oldEle.parentNode.insertBefore(newEle, next);\n        return;\n      }\n\n      oldEle.parentNode.appendChild(newEle);\n    } // 属性的读取和设置\n\n    /**\r\n     * @desc 属性的读取和设置（可含多个属性设置）\r\n     * @desc getAttribute是获取和设置dom元素对象的值和属性，js对象用property来设置\r\n     *       js对象(如：{})没getAttribute方法\r\n     * @desc property和getAttribute在IE9+上不共享，在IE9下属性值共享\r\n     * @desc 分开处理property和Attribute问题\r\n     * @DateTime 2018-04-18\r\n     * @param    {HTML Element}   ele\r\n     * @param    {object||String}   name  对象或属性名\r\n     * @param    {String}   value 属性值\r\n     */\n\n\n    function attr(ele, name, value) {\n      // 如果给多个属性设置 类似 {width:'22px',value:'hao'}\n      if (_typeof(name) === 'object') {\n        for (var attr in name) {\n          attr(ele, attr, name[attr]);\n        } // name不是对象走下面的\n        // 设置值的时候 且值不等于undefined\n\n      } else if (value !== undefined) {\n        //元素存在setAttribute 就用这个\n        if (typeof ele.setAttribute !== 'undefined') {\n          if (value === false) {\n            // 移除这个属性\n            ele.removeAttribute(name);\n          } else {\n            // value is true\n            // 处理boolean\n            ele.setAttribute(name, value === true ? name : value);\n          } // 不存在setAttribute方法时候用property\n\n        } else {\n          ele[name] = value;\n        } // 获取值 且当getAttribute方法存在，值不是布尔值类型\n        // 因为如果是布尔值类型，getAttribute获取的不是最新的\n        // propertye获取才是最新的\n\n      } else if (typeof ele.getAttribute !== 'undefined' && typeof ele[name] !== 'boolean') {\n        console.log('getAttribute');\n        return ele.getAttribute(name); //获取值 且getAttribute方法不存在，用property方法获取值\n      } else {\n        return ele[name];\n      }\n    }\n    /**\r\n     * 低版本\r\n     *\r\n     * @desc  获取css样式 (兼容IE)\r\n     * @DateTime 2018-04-19\r\n     * @param    {HTML Element}   ele  [description]\r\n     * @param    {String}   attr 属性\r\n     * @return   {String}        value\r\n     */\n\n    /*function getStyle(ele,attr) {\r\n       // IE系列\r\n       // 不能用 ele.getComputedStyle来判断，因为ele里面没getComputedStyle\r\n      if(ele.currentStyle) {\r\n           getStyle=function(ele,attr) {\r\n             return ele.currentStyle[attr];\r\n         }\r\n          //FF,chrome,opera\r\n      } else {\r\n           getStyle=function(ele,attr) {\r\n            return getComputedStyle(ele,false)[attr];\r\n        }\r\n      }\r\n      return getStyle(ele,attr);\r\n    }*/\n\n    /**\r\n     * @desc  兼容所有浏览器\r\n     * @desc  加强版上面的，获取去掉带单位的数字 属性值 如:width:20px\r\n     * @DateTime 2018-06-23\r\n     * @param    {HTML Ele}   curEle [description]\r\n     * @param    {String}   attr   [description]\r\n     * @return   {String}\r\n     */\n\n\n    function getStyle(curEle, attr) {\n      var val = null;\n      var reg = null; // 数字+单位的 width:300px这样\n\n      reg = /^(-?\\d+(?:\\.\\d+)?)(px|pt|rem|em)$/; // IE9及其以上现代浏览器\n\n      if (\"getComputedStyle\" in window) {\n        val = window.getComputedStyle(curEle, null)[attr];\n      } else {\n        val = curEle.currentStyle[attr];\n      } // 是数字类型的属性 去除单位，非数字类型正常返回\n\n\n      return reg.test(val) ? parseFloat(val) : val;\n    }\n    /**\r\n     * @desc  相当于pageX，pageY，跟jq中的offset对应，元素相对于页面的top和left\r\n     * @DateTime 2018-06-17\r\n     * @param    {HTML Element}   ele\r\n     * @return   {object}\r\n     */\n\n\n    function offset(ele) {\n      var left = 0,\n          top = 0;\n\n      while (ele) {\n        left += ele.offsetLeft;\n        top += ele.offsetTop;\n        ele = ele.offsetParent;\n      }\n\n      return {\n        left: left,\n        top: top\n      };\n    }\n    /**\r\n     * @desc 获取距离 含有定位父级的 距离\r\n     * @desc 也就是一次的offsetLeft和offsetTop\r\n     * @DateTime 2018-06-17\r\n     * @param    {HTML Element}   ele\r\n     * @return   {object}\r\n     */\n\n\n    function position(ele) {\n      if (ele) {\n        return {\n          left: ele.offsetLeft,\n          top: ele.offsetTop\n        };\n      }\n    }\n    /**\r\n       * @desc this是指当前元素，获取元素样式\r\n     * @DateTime 2018-06-17\r\n     * @param    {string}   attr\r\n     * @return   {Number}\r\n     */\n\n\n    function getClass(attr) {\n      return window.getComputedStyle ? getComputedStyle(this, false)[attr] : this.currentStyle[attr];\n    }\n    /**\r\n     * @desc 里面的this是指当前元素，设置元素单个样式\r\n     * @DateTime 2018-06-17\r\n     * @param    {String}   attr  属性\r\n     * @param    {Number|String}  属性值\r\n     */\n\n\n    function setClass(attr, value) {\n      // float情况\n      if (attr === \"float\") {\n        this[\"style\"][\"cssFloat\"] = value;\n        this[\"style\"][\"styleFloat\"] = value;\n        return;\n      } // opacity情况\n\n\n      if (attr === \"opacity\") {\n        this[\"style\"][\"opacity\"] = value;\n        this[\"style\"][\"filter\"] = \"alpha(opacity=\" + value * 100 + \")\";\n        return;\n      }\n\n      var reg = null; // 对于要加px的单位的，如果没加单位就给它补上\n\n      reg = /^(width|height|top|bottom|left|right|((margin|padding)(Top|Bottom|Left|Right)?))$/; // 首先是这些属性中的某个\n\n      if (reg.test(attr)) {\n        // 是纯数字\n        if (!isNaN(value)) {\n          value += \"px\";\n        }\n      }\n\n      this[\"style\"][attr] = value;\n    }\n    /**\r\n     * @desc this为当前元素 批量设置元素样式\r\n     * @DateTime 2018-06-17\r\n     * @param    {object}   样式参数\r\n     */\n\n\n    function setGroupClass(option) {\n      // 如果为undefined-> 0\n      option = option || 0;\n\n      if (option.toString() !== \"[object Object]\") {\n        throw new TypeError(\"it is not object\");\n      }\n\n      for (var key in option) {\n        if (option.hasOwnProperty(key)) {\n          setClass.call(this, key, option[key]);\n        }\n      }\n    }\n    /**\r\n     * @desc 类似jq的css，实现了获取，单独设置，批量设置元素的样式\r\n     * @DateTime 2018-06-17\r\n     * @param    {HTML Element}\r\n     * @return   {Number}\r\n     */\n\n\n    function css(curEle) {\n      var argTwo = arguments[1];\n      var ary = [].slice.call(arguments, 1); // 含2个参数且是字符串类型\n\n      if (typeof argTwo === \"string\") {\n        var argThree = arguments[2]; // 不存在第三个值，表示获取属性\n\n        if (typeof argThree === \"undefined\") {\n          return getClass.apply(curEle, ary);\n        } // 存在第三个值，表示设置属性\n\n\n        setClass.apply(curEle, ary);\n      } // 防止undefined.toString报错，把undefined转为0\n\n\n      argTwo = argTwo || 0; // 如果第二个参数是对象，批量设置元素属性\n\n      if (argTwo.toString() === \"[object Object]\") {\n        setGroupClass.apply(curEle, ary);\n      }\n    }\n    /**\r\n     * @desc 兼容JSON.parse方法（IE8及其以下不支持）\r\n     * @DateTime 2018-06-19\r\n     * @param    {String}   str\r\n     * @return   {Object}      json处理后的对象\r\n     */\n\n\n    function jsonParse(str) {\n      var obj = null;\n\n      try {\n        obj = JSON.parse(str);\n      } catch (e) {\n        obj = eval(\"(\" + str + \")\");\n      }\n\n      return obj;\n    } // 暴露接口\n\n\n    return _ref = {\n      css: css,\n      attr: attr,\n      getStyle: getStyle,\n      hasClass: hasClass,\n      addClass: addClass,\n      removeClass: removeClass,\n      toggleClass: toggleClass,\n      getClassName: getClassName,\n      toArray: toArray,\n      getChildren: getChildren,\n      getPreEle: getPreEle,\n      getNextEle: getNextEle,\n      getPrevAll: getPrevAll,\n      getNextAll: getNextAll,\n      getSibling: getSibling,\n      getSiblings: getSiblings,\n      index: index,\n      getFirstChild: getFirstChild,\n      getLastChild: getLastChild,\n      append: append,\n      prepend: prepend,\n      insertBefore: insertBefore,\n      insertAfter: insertAfter,\n      offset: offset,\n      position: position\n    }, _defineProperty(_ref, \"css\", css), _defineProperty(_ref, \"jsonParse\", jsonParse), _ref;\n  }();\n\n  win.dom = dom;\n})(window || {});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ('common.js');\n\n//# sourceURL=webpack:///./src/js/common.js?");

/***/ })

}]);