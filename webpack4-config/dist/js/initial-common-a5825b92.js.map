{"version":3,"sources":["webpack:///./src/js/common.js"],"names":["win","dom","_ref","flag","hasClass","ele","cls","RegExp","test","className","addClass","arr","replace","split","i","len","length","curCls","this","removeClass","re","toggleClass","getClassName","strClass","context","arrClass","document","slice","call","getElementsByClassName","nodes","getElementsByTagName","curEle","j","push","toArray","Array","prototype","concat","apply","getChildren","tag","children","nodeList","childNodes","curNode","nodeType","nodeName","toLowerCase","splice","getPreEle","previousElementSibling","pre","previousSibling","getNextEle","nextElementSibling","next","nextSibling","getPrevAll","prev","unshift","getNextAll","getSibling","getSiblings","index","getFirstChild","child","getLastChild","append","newEle","container","appendChild","prepend","first","insertBefore","oldEle","parentNode","insertAfter","attr","name","value","_typeof","undefined","getAttribute","console","log","setAttribute","removeAttribute","getStyle","val","reg","window","getComputedStyle","currentStyle","parseFloat","offset","left","top","offsetLeft","offsetTop","offsetParent","position","getClass","setClass","isNaN","setGroupClass","option","toString","TypeError","key","hasOwnProperty","css","argTwo","arguments","ary","jsonParse","str","obj","JSON","parse","e","eval","_defineProperty","_unused_webpack_default_export"],"mappings":"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","file":"./js/initial-common-a5825b92.js","sourcesContent":["//dom常用事件\r\n(function(win) {\r\n    var dom=(function() {\r\n        //addClass,removeClass,toggleClass,hasClass,都只能检测一个类名\r\n        //String中'first dom'这样是不行的，只能'first'这种的\r\n\r\n        // true表示标准浏览器（IE9及其以上） false表示IE6-8\r\n        var flag=\"getComputedStyle\" in win;\r\n\r\n\r\n\r\n\r\n\r\n        // 类名的增删改查\r\n\r\n\r\n        /**\r\n         * @desc  支持单个或者多个类名\r\n         * @DateTime 2018-04-15\r\n         * @param    {HTML Element}   dom元素\r\n         * @param    {String}  className\r\n         * @return   {Boolean}\r\n         */\r\n        function hasClass(ele,cls) {\r\n\r\n            // 这种 var re=new RegExp('(^|\\\\s+)'+cls+'($|\\\\s+)'); 也可以\r\n            var re=new RegExp('\\\\b'+cls+'\\\\b');\r\n            return re.test(ele.className);\r\n        }\r\n\r\n        /**\r\n         * @desc  只添加不存在的类名 支持单个或多个类名的增加\r\n         * @DateTime 2018-04-15\r\n         * @param    {HTML Element}   dom元素\r\n         * @param    {String}  className\r\n         */\r\n        function addClass(ele,cls) {\r\n            // 先去除首尾空格\r\n            var arr=cls.replace(/^\\s+|\\s+$/g,\"\").split(/\\s+/g);// 以单个或多个空格分割，加不加g无所谓\r\n\r\n            for(var i=0,len=arr.length;i<len;i++) {\r\n                var curCls=arr[i];\r\n                if(!this.hasClass(ele,curCls)) {\r\n                    ele.className+=' '+cls;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @desc 只删除存在的类名 支持单个或多个类名的删减\r\n         * @DateTime 2018-04-15\r\n         * @param    {HTML Element}   dom元素\r\n         * @param    {String}  className\r\n         */\r\n        function removeClass(ele,cls) {\r\n            // 先去除首尾空格\r\n            var arr=cls.replace(/^\\s+|\\s+$/g,\"\").split(/\\s+/g);// 以单个或多个空格分割，加不加g无所谓\r\n\r\n            for(var i=0,len=arr.length;i<len;i++) {\r\n                var re=new RegExp('\\\\b'+arr[i]+'\\\\b');\r\n                var curCls=arr[i];\r\n                if(this.hasClass(ele,curCls)) {\r\n                    // 去除单词\r\n                    ele.className=ele.className.replace(re,'');\r\n                    // 去除删掉开头或者结尾单词留下的 开头结尾空格\r\n                    ele.className=ele.className.replace(/^\\s+|\\s+$/g,'');\r\n                    // 去除中间的空格，把多个空格换成一个空格\r\n                    ele.className=ele.className.replace(/\\b\\s+\\b/g,' ');\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @desc 把存在的删除，不存在的添加\r\n         * @DateTime 2018-04-15\r\n         * @param    {HTML Element}   dom元素\r\n         * @param    {String}  className\r\n         */\r\n        function toggleClass(ele,cls) {\r\n            // 先去除首尾空格\r\n            var arr=cls.replace(/^\\s+|\\s+$/g,\"\").split(/\\s+/g);// 以单个或多个空格分割，加不加g无所谓\r\n\r\n            for(var i=0,len=arr.length;i<len;i++) {\r\n                var re=new RegExp('\\\\b'+arr[i]+'\\\\b');\r\n                var curCls=arr[i];\r\n                // 下面这种太麻烦，不管类名在开头,中间还是结尾都是单词\r\n                // 所以直接用上面的\r\n                // var re=new RegExp('(^|\\\\s+)'+arr[i]+'($|\\\\s+)');\r\n\r\n                // 不存在就添加，存在就删除\r\n                if(!this.hasClass(ele,curCls)) {\r\n                    ele.className+=' '+curCls;\r\n                } else {\r\n                    // 用空格替换 re\r\n                    ele.className=ele.className.replace(re,' ');\r\n                    // 去除删掉开头或者结尾单词留下的 开头结尾空格\r\n                    ele.className=ele.className.replace(/^\\s+|\\s+$/g,'');\r\n                    // 去除中间的空格, 中间空格两边是边界\\b\r\n                    ele.className=ele.className.replace(/\\b\\s+\\b/g,' ');\r\n\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * @desc   获取某个dom对象下的含有1个或者多个className的dom对象\r\n         *         惰性模式 不需要每次调用时候都要判断 浏览器类型\r\n         * @DateTime 2018-04-17\r\n         * @param    {String}   className\r\n         * @param    {HTML Element}   dom 元素\r\n         * @return   {HTML Element}         dom对象\r\n         */\r\n        function getClassName(strClass,context) {\r\n            var arrClass=strClass.split(' '),\r\n                context=context||document,\r\n\r\n                arr=[];\r\n\r\n            //IE9+以及现代浏览器 ByClassName可以接受'one two '这样类名\r\n            if(flag) {\r\n\r\n                getClassName=function(strClass,context) {\r\n\r\n                    // 把伪数组转为 真数组\r\n                    return [].slice.call(context.getElementsByClassName(strClass));\r\n                }\r\n\r\n            } else {\r\n                // IE6-8\r\n                getClassName=function(strClass,context) {\r\n\r\n                    var nodes=context.getElementsByTagName('*');\r\n\r\n                    for(var i=0,len=nodes.length;i<len;i++) {\r\n                        // 当前dom节点\r\n                        var  curEle=nodes[i],\r\n                            //  假设当前dom节点都含有多个className\r\n                            flag=true;\r\n                        for(var j=0,length=arrClass.length;j<length;j++) {\r\n                            var re=new RegExp('\\\\b'+arrClass[i]+'\\\\b');\r\n\r\n                            //下面这种太麻烦，不管类名在开头,中间还是结尾都是单词\r\n                            //所以直接用上面的\r\n                            //var re=new RegExp('(^|\\\\s+)'+arrClass[j]+'($|\\\\s+)');\r\n                            if(!re.test(curEle.className)) {\r\n                                flag=false;\r\n                                // 只要有一个className不存在就跳出for循环\r\n                                // 开始下一个dom节点\r\n                                break;\r\n                            }\r\n                        }\r\n                        // 如果当前dom元素的className满足strClass的话\r\n                        if(flag) {\r\n                            arr.push(curEle);\r\n                        }\r\n                    }\r\n\r\n                    return arr;\r\n                }\r\n\r\n            }\r\n            return getClassName(strClass,context);\r\n        }\r\n        /**\r\n         * @desc  伪数组转为真数组 (兼容IE6-8)\r\n         * @DateTime 2018-04-18\r\n         * @param    {NodeList}   伪数组\r\n         * @return   {Array}       数组\r\n         */\r\n        function toArray(arr) {\r\n            arr=arr||[];\r\n\r\n            // IE9+和其他浏览器\r\n            if(flag) {\r\n                return Array.prototype.slice.call(arr);\r\n            } else {\r\n                // IE6-8 不支持slice方法\r\n                return Array.prototype.concat.apply([],arr);\r\n            }\r\n        }\r\n\r\n        // dom节点的增删\r\n\r\n\r\n        /**\r\n         * @desc    获取某个元素的子元素，第二个参数可选，过滤特定元素\r\n         * @desc    兼容所有浏览器\r\n         * @desc    平常都用 oparent.getElementsByTagName('p') 这种方法，\r\n         * @desc    getChildren2方法就是为了练习用的，没必要用\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   curEle  dom元素\r\n         * @param    {String}   tagName  标签名\r\n         * @return   {Array}           包含dom元素的真数组\r\n         */\r\n\r\n        function getChildren(curEle,tag) {\r\n            var arr=[];\r\n            //IE9+和其他浏览器\r\n            if(flag) {\r\n                arr=[].slice.call(curEle.children);\r\n\r\n            } else {\r\n                var nodeList=curEle.childNodes;\r\n                for(var i=0,len=nodeList.length;i<len;i++) {\r\n                    var curNode=nodeList[i];\r\n\r\n                    curNode.nodeType===1?arr.push(curNode):null;\r\n                }\r\n                // 回收\r\n                nodeList=null;\r\n            }\r\n\r\n            // 如果有第二个参数的话\r\n            if(typeof tag==='string') {\r\n\r\n                // 不能写成len=arr.length，因为arr.length是减少的\r\n                // 这是个大坑，注意下\r\n                for(var i=0;i<arr.length;i++) {\r\n                    var ele=arr[i];\r\n\r\n                    if(ele.nodeName.toLowerCase() !==tag.toLowerCase()){\r\n\r\n                        // 不是想要的标签，删掉，并重新从这个位置开始检测\r\n                        arr.splice(i,1);\r\n                        i--;\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        /**\r\n         * @desc 获取上一个兄弟节点\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   curEle dom元素\r\n         * @return   {HTML Element}    dom元素\r\n         */\r\n        function getPreEle(curEle) {\r\n            //IE9+和其他浏览器\r\n            if(flag) {\r\n                return curEle.previousElementSibling;\r\n            }\r\n            // IE6-8\r\n            var pre=curEle.previousSibling;\r\n            while(pre && pre.nodeType!==1) {\r\n                pre=pre.previousSibling;\r\n            }\r\n            return pre;\r\n\r\n        }\r\n\r\n        /**\r\n         * @desc 获取下一个dom元素节点\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   curEle dom元素\r\n         * @return   {HTML Element}       dom元素\r\n         */\r\n        function getNextEle(curEle) {\r\n            //IE9+和其他浏览器\r\n            if(flag) {\r\n                return curEle.nextElementSibling;\r\n            }\r\n            // IE6-8\r\n            var next=curEle.nextSibling;\r\n            while(next && next.nodeType!==1) {\r\n                next=next.nextSibling;\r\n            }\r\n            return next;\r\n\r\n        }\r\n\r\n        /**\r\n         * @desc  获取前面所有节点\r\n         * @DateTime 2018-04-18\r\n         * @param    {[type]}   curEle [description]\r\n         * @return   {[type]}          [description]\r\n         */\r\n        function getPrevAll(curEle) {\r\n            var arr=[];\r\n            var prev=this.getPreEle(curEle);\r\n\r\n            // 前面节点可能没有为null\r\n            while(prev) {\r\n                arr.unshift(prev);\r\n                prev=this.getPreEle(prev);\r\n            }\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * @desc  获取当前元素后面所有元素\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   curEle\r\n         * @return   {HTML Element}\r\n         */\r\n        function getNextAll(curEle) {\r\n            var arr=[];\r\n            var next=this.getNextEle(curEle);\r\n\r\n            //后面节点可能没有为null\r\n            while(next) {\r\n                arr.push(next);\r\n                next=this.getNextEle(next);\r\n            }\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * @desc 获取当前元素的相邻的两个元素节点\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   curEle\r\n         * @return   {HTML Element}\r\n         */\r\n        function getSibling(curEle) {\r\n            var pre=this.getPreEle(curEle);\r\n            var next=this.getNextEle(curEle);\r\n            var arr=[];\r\n            pre?arr.push(pre):null;\r\n            next?arr.push(next):null;\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * @desc  获取所有的兄弟元素节点\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   curEle\r\n         * @return   {NodeList}          dom元素集合\r\n         */\r\n        function getSiblings(curEle) {\r\n            return this.getPrevAll(curEle).concat(this.getNextAll(curEle));\r\n        }\r\n\r\n        /**\r\n         * @desc  获取当前元素的索引\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   curEle\r\n         * @return   {Number}          index\r\n         */\r\n        function index(curEle) {\r\n            return this.getPrevAll(curEle).length;\r\n        }\r\n\r\n        /**\r\n         * @desc 获取当前元素第一个子元素\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   curEle\r\n         * @return   {HTML Element}\r\n         */\r\n        function getFirstChild(curEle) {\r\n            var child=this.getChildren(curEle);\r\n            return child.length>0? child[0]:null;\r\n        }\r\n\r\n        /**\r\n         * @desc 获取当前元素最后一个子元素\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   curEle\r\n         * @return   {HTML Element}\r\n         */\r\n        function getLastChild(curEle) {\r\n            var child=this.getChildren(curEle);\r\n            return child.length>0? child[child.length-1]:null;\r\n        }\r\n\r\n        /**\r\n         * @desc  向指定容器的末尾添加元素\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   newEle    [description]\r\n         * @param    {HTML Element}   container [description]\r\n         */\r\n        function append(newEle,container) {\r\n            container.appendChild(newEle);\r\n        }\r\n\r\n        /**\r\n         * @Author   xjc\r\n         * @desc  向指定容器的开头添加元素\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   newEle    [description]\r\n         * @param    {HTML Element}   container [description]\r\n         */\r\n        function prepend(newEle,container) {\r\n            var first=this.getFirstChild(container);\r\n\r\n            // 容器里面存在元素的话就向他后面添加，否则就在末尾添加\r\n            if(first) {\r\n                container.insertBefore(newEle,first);\r\n                return;\r\n            }\r\n            container.appendChild(newEle);\r\n        }\r\n\r\n        /**\r\n         * @desc 把新元素(newEle) 追加到指定元素(oldEle) 前面\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   newEle [description]\r\n         * @param    {HTML Element}   oldEle [description]\r\n         */\r\n        function insertBefore(newEle,oldEle) {\r\n            oldEle.parentNode.insertBefore(newEle,oldEle);\r\n        }\r\n\r\n        /**\r\n         * @desc 把新元素(newEle) 追加到指定元素(oldEle) 后面\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   newEle [description]\r\n         * @param    {HTML Element}   oldEle [description]\r\n         */\r\n        function insertAfter(newEle,oldEle) {\r\n            var next=this.getNextEle(oldEle);\r\n            //如果后面存在元素，就在后面元素的前面插入新元素\r\n            //否则没有子元素的话就在后面添加\r\n            if(next) {\r\n                oldEle.parentNode.insertBefore(newEle,next);\r\n                return;\r\n            }\r\n            oldEle.parentNode.appendChild(newEle);\r\n        }\r\n\r\n\r\n        // 属性的读取和设置\r\n        /**\r\n         * @desc 属性的读取和设置（可含多个属性设置）\r\n         * @desc getAttribute是获取和设置dom元素对象的值和属性，js对象用property来设置\r\n         *       js对象(如：{})没getAttribute方法\r\n         * @desc property和getAttribute在IE9+上不共享，在IE9下属性值共享\r\n         * @desc 分开处理property和Attribute问题\r\n         * @DateTime 2018-04-18\r\n         * @param    {HTML Element}   ele\r\n         * @param    {object||String}   name  对象或属性名\r\n         * @param    {String}   value 属性值\r\n         */\r\n        function attr(ele,name,value) {\r\n            // 如果给多个属性设置 类似 {width:'22px',value:'hao'}\r\n            if(typeof name==='object') {\r\n                for(var attr in name) {\r\n                    attr(ele,attr,name[attr]);\r\n                }\r\n                // name不是对象走下面的\r\n                // 设置值的时候 且值不等于undefined\r\n            } else if( value!==undefined) {\r\n                //元素存在setAttribute 就用这个\r\n\r\n                if(typeof ele.setAttribute!=='undefined') {\r\n                    if(value===false) {\r\n                        // 移除这个属性\r\n                        ele.removeAttribute(name);\r\n                    } else {\r\n                        // value is true\r\n                        // 处理boolean\r\n                        ele.setAttribute(name,value===true?name:value)\r\n                    }\r\n                    // 不存在setAttribute方法时候用property\r\n                } else {\r\n                    ele[name]=value;\r\n                }\r\n                // 获取值 且当getAttribute方法存在，值不是布尔值类型\r\n                // 因为如果是布尔值类型，getAttribute获取的不是最新的\r\n                // propertye获取才是最新的\r\n            } else if(typeof ele.getAttribute!=='undefined' && typeof ele[name]!=='boolean') {\r\n                console.log('getAttribute');\r\n                return ele.getAttribute(name);\r\n\r\n                //获取值 且getAttribute方法不存在，用property方法获取值\r\n            } else {\r\n                return ele[name];\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * 低版本\r\n         *\r\n         * @desc  获取css样式 (兼容IE)\r\n         * @DateTime 2018-04-19\r\n         * @param    {HTML Element}   ele  [description]\r\n         * @param    {String}   attr 属性\r\n         * @return   {String}        value\r\n         */\r\n        /*function getStyle(ele,attr) {\r\n           // IE系列\r\n           // 不能用 ele.getComputedStyle来判断，因为ele里面没getComputedStyle\r\n          if(ele.currentStyle) {\r\n\r\n             getStyle=function(ele,attr) {\r\n\r\n               return ele.currentStyle[attr];\r\n             }\r\n\r\n\r\n          //FF,chrome,opera\r\n          } else {\r\n\r\n             getStyle=function(ele,attr) {\r\n\r\n              return getComputedStyle(ele,false)[attr];\r\n            }\r\n          }\r\n          return getStyle(ele,attr);\r\n        }*/\r\n\r\n        /**\r\n         * @desc  兼容所有浏览器\r\n         * @desc  加强版上面的，获取去掉带单位的数字 属性值 如:width:20px\r\n         * @DateTime 2018-06-23\r\n         * @param    {HTML Ele}   curEle [description]\r\n         * @param    {String}   attr   [description]\r\n         * @return   {String}\r\n         */\r\n        function getStyle(curEle,attr) {\r\n            var val=null;\r\n            var reg=null;\r\n            // 数字+单位的 width:300px这样\r\n            reg=/^(-?\\d+(?:\\.\\d+)?)(px|pt|rem|em)$/;\r\n            // IE9及其以上现代浏览器\r\n            if(\"getComputedStyle\" in window) {\r\n                val=window.getComputedStyle(curEle,null)[attr];\r\n\r\n            } else {\r\n                val=curEle.currentStyle[attr];\r\n            }\r\n            // 是数字类型的属性 去除单位，非数字类型正常返回\r\n            return reg.test(val)?parseFloat(val):val;\r\n        }\r\n        /**\r\n         * @desc  相当于pageX，pageY，跟jq中的offset对应，元素相对于页面的top和left\r\n         * @DateTime 2018-06-17\r\n         * @param    {HTML Element}   ele\r\n         * @return   {object}\r\n         */\r\n        function offset(ele) {\r\n            var left=0,\r\n                top=0;\r\n            while(ele) {\r\n                left+=ele.offsetLeft;\r\n                top+=ele.offsetTop;\r\n                ele=ele.offsetParent;\r\n            }\r\n            return {\r\n                left:left,\r\n                top:top\r\n            };\r\n        }\r\n\r\n        /**\r\n         * @desc 获取距离 含有定位父级的 距离\r\n         * @desc 也就是一次的offsetLeft和offsetTop\r\n         * @DateTime 2018-06-17\r\n         * @param    {HTML Element}   ele\r\n         * @return   {object}\r\n         */\r\n        function position(ele) {\r\n            if(ele) {\r\n                return {left:ele.offsetLeft,top:ele.offsetTop};\r\n            }\r\n        }\r\n\r\n        /**\r\n\r\n         * @desc this是指当前元素，获取元素样式\r\n         * @DateTime 2018-06-17\r\n         * @param    {string}   attr\r\n         * @return   {Number}\r\n         */\r\n        function getClass(attr) {\r\n            return window.getComputedStyle?getComputedStyle(this,false)[attr]:\r\n                this.currentStyle[attr];\r\n        }\r\n        /**\r\n         * @desc 里面的this是指当前元素，设置元素单个样式\r\n         * @DateTime 2018-06-17\r\n         * @param    {String}   attr  属性\r\n         * @param    {Number|String}  属性值\r\n         */\r\n        function setClass(attr,value) {\r\n            // float情况\r\n            if(attr===\"float\") {\r\n                this[\"style\"][\"cssFloat\"]=value;\r\n                this[\"style\"][\"styleFloat\"]=value;\r\n                return;\r\n            }\r\n            // opacity情况\r\n            if(attr===\"opacity\") {\r\n                this[\"style\"][\"opacity\"]=value;\r\n                this[\"style\"][\"filter\"]=\"alpha(opacity=\"+value*100+\")\";\r\n                return;\r\n            }\r\n            var reg=null;\r\n            // 对于要加px的单位的，如果没加单位就给它补上\r\n            reg=/^(width|height|top|bottom|left|right|((margin|padding)(Top|Bottom|Left|Right)?))$/;\r\n            // 首先是这些属性中的某个\r\n            if(reg.test(attr)) {\r\n                // 是纯数字\r\n                if(!isNaN(value)) {\r\n                    value+=\"px\";\r\n                }\r\n            }\r\n            this[\"style\"][attr]=value;\r\n        }\r\n        /**\r\n         * @desc this为当前元素 批量设置元素样式\r\n         * @DateTime 2018-06-17\r\n         * @param    {object}   样式参数\r\n         */\r\n        function setGroupClass(option) {\r\n            // 如果为undefined-> 0\r\n            option=option||0;\r\n            if(option.toString()!==\"[object Object]\") {\r\n                throw new TypeError(\"it is not object\");\r\n            }\r\n            for(var key in option) {\r\n                if(option.hasOwnProperty(key)) {\r\n                    setClass.call(this,key,option[key]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @desc 类似jq的css，实现了获取，单独设置，批量设置元素的样式\r\n         * @DateTime 2018-06-17\r\n         * @param    {HTML Element}\r\n         * @return   {Number}\r\n         */\r\n        function css(curEle) {\r\n            var argTwo=arguments[1];\r\n            var ary=[].slice.call(arguments,1);\r\n            // 含2个参数且是字符串类型\r\n            if(typeof argTwo===\"string\") {\r\n                var argThree=arguments[2];\r\n                // 不存在第三个值，表示获取属性\r\n                if(typeof argThree===\"undefined\") {\r\n                    return getClass.apply(curEle,ary);\r\n                }\r\n\r\n                // 存在第三个值，表示设置属性\r\n                setClass.apply(curEle,ary);\r\n            }\r\n            // 防止undefined.toString报错，把undefined转为0\r\n            argTwo=argTwo||0;\r\n\r\n            // 如果第二个参数是对象，批量设置元素属性\r\n            if(argTwo.toString()===\"[object Object]\") {\r\n                setGroupClass.apply(curEle,ary);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @desc 兼容JSON.parse方法（IE8及其以下不支持）\r\n         * @DateTime 2018-06-19\r\n         * @param    {String}   str\r\n         * @return   {Object}      json处理后的对象\r\n         */\r\n        function jsonParse(str) {\r\n            var obj=null;\r\n            try{\r\n                obj=JSON.parse(str);\r\n            } catch(e) {\r\n                obj=eval(\"(\"+str+\")\");\r\n            }\r\n            return obj;\r\n        }\r\n        // 暴露接口\r\n        return {\r\n            css:css,\r\n            attr:attr,\r\n            getStyle:getStyle,\r\n            hasClass:hasClass,\r\n            addClass:addClass,\r\n            removeClass:removeClass,\r\n            toggleClass:toggleClass,\r\n            getClassName:getClassName,\r\n            toArray:toArray,\r\n            getChildren:getChildren,\r\n            getPreEle:getPreEle,\r\n            getNextEle:getNextEle,\r\n            getPrevAll:getPrevAll,\r\n            getNextAll:getNextAll,\r\n            getSibling:getSibling,\r\n            getSiblings:getSiblings,\r\n            index:index,\r\n            getFirstChild:getFirstChild,\r\n            getLastChild:getLastChild,\r\n            append:append,\r\n            prepend:prepend,\r\n            insertBefore:insertBefore,\r\n            insertAfter:insertAfter,\r\n            offset:offset,\r\n            position:position,\r\n            css:css,\r\n            jsonParse:jsonParse\r\n        };\r\n    })();\r\n\r\n\r\n\r\n    win.dom=dom;\r\n})(window||{});\r\n\r\nexport default 'common.js'"],"sourceRoot":""}